{
  "tiddlers": [
    {
      "title": "$FavoritesPlugin",
      "text": "/**\n * ## Description\n * Provide <<favorites.toggle>> widget\n *   Toggles tag 'Favorite' on current tiddler\n *   for use on $TiddlerDisplay template\n */\n/**\n * ## Data\n * ```json\n * {\n *   \"version\": 1.0.0\n * }\n * ```\n */\n(function(){\n  tw.macros.favorites = {\n    toggle() {\n      // TODO: How to find the current tiddler/element?\n      // let el = tw.core.dom.nearestAttribute\n      return tw.ui.button('{{$IconFavorite}}', 'favorites.toggle', '$currentTiddler', 'favoriteAdd');\n    },\n  };\n  tw.events.subscribe('favorites.toggle', favoriteToggle);\n  function favoriteToggle(title) {\n    const t = tw.call('getTiddler', title);\n    if (!t) throw new Error(`Unknown tiddler '${title}'!`);\n    // if (t.tags.includes('$NoEdit')) return tw.ui.notify('Tiddler is readonly!', 'E');\n    if (t.doNotSave) tw.ui.notify('Tiddler will not be saved!', 'W');\n    tw.call('tiddlerToggleTag', t.title, 'Favorite');\n    let btn = tw.call('getTiddlerElement', title)?.querySelector('button[title=favorite]');\n    // dp(t.tags.includes('Favorite'), btn);\n    if (btn) {\n      if (!t.tags.includes('Favorite'))\n        btn.className += ' yellow';\n    }\n    // dp(btn.className);\n    tw.events.send('save.silent');\n  }\n  // Add {{=favoriteClass}} to your $TiddlerDisplay\n  tw.extend.tiddlerDetails.favoriteClass = function(t) {\n    return t.tags.includes('Favorite') ? 'favorite' : '';\n  };\n})();\n// TODO: How to add button:yellow svg {fill: yellow;} to theme?\n",
      "tags": [],
      "type": "script/js",
      "created": "2024-11-08T10:20:43.4987515Z",
      "updated": "2024-11-08T11:29:43.3127018Z"
    },
    {
      "title": "$JSONSiloBackupPlugin",
      "text": "/**\n * ## Description\n * Backup your data to [JSONSilo.com](https://jsonsilo.com)\n */\n/**\n * ## Data\n * ```json\n * {\n *   \"version\": 1.0.0\n * }\n * ```\n */\n// ## Code\n// ```javascript\ntw.macros.backup = {\n  restoreButton() {\n    return tw.ui.button('{{$IconRestore}}', 'backup.restore', null, 'restore', 'title=\"Restore Backup Data\"');\n  },\n  backupButton() {\n    return tw.ui.button('{{$IconBackup}}', 'backup.save', null, 'backup', 'title=\"Backup Data\"');\n  },\n  async restore() {\n    alert('JSONSilo');\n    let settings = tw.call('getJSONObject', '$GeneralSettings');\n    if (!settings || !settings.backup?.JSONSilo?.accessKey || !settings.backup?.JSONSilo?.siloId) return tw.ui.notify('No JSONSilo accessKey/siloId found in $GeneralSettings!', 'W');\n    let res = await fetch('https://api.jsonsilo.com/' + settings.backup.JSONSilo.siloId, {\n      headers: {\n        'X-SILO-KEY': settings.backup.JSONSilo.accessKey,\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!res.ok) return tw.ui.notify(`Restore failed '${res.status}' (see log)`, 'E');\n    let result = await res.json();\n    Object.assign(tw.tiddlers, result.record);\n    tw.run.save();\n    if (confirm('Restore complete. Would you like to reload?')) tw.events.send('reboot.hard');\n    tw.ui.notify('Restore complete!', 'S');\n  },\n  async save() {\n    alert('JSONSilo');\n    let settings = tw.call('getJSONObject', '$GeneralSettings');\n    if (!settings || !settings.backup?.JSONSilo?.accessKey || !settings.backup?.JSONSilo?.siloId) return tw.ui.notify('No JSONSilo accessKey/siloId found in $GeneralSettings!', 'W');\n    let body = JSON.stringify({\n      all: tw.tiddlers.all,\n      visible: tw.tiddlers.visible,\n      trashed: tw.tiddlers.trashed,\n    });\n    let res = await fetch('https://api.jsonsilo.com/' + settings.backup.JSONSilo.siloId, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-SILO-KEY': settings.backup.JSONSilo.accessKey,\n      },\n      body,\n    });\n    if (!res.status === 403) return tw.ui.notify(`Backup failed '${res.status}': Unauthorized (see log)!`, 'E');\n    if (!res.ok) return tw.ui.notify(`Backup failed '${res.status}' (see log)`, 'E');\n    tw.ui.notify(`Backup complete! (${body.length / 1000} KB)`, 'S');\n  },\n};\ntw.events.override('backup.save', tw.macros.backup.save);\ntw.events.override('backup.restore', tw.macros.backup.restore);\n",
      "tags": [],
      "type": "script/js",
      "created": "2024-11-10T18:42:50.3820664Z",
      "updated": "2024-11-10T19:49:19.9280515Z"
    },
    {
      "title": "$TiddlerDisplay",
      "text": "<div class=\"tiddler shadow{{=isRawShadow}}\" data-tiddler-id=\"{{=id}}\" data-tiddler-title=\"$currentTiddler\" tabindex=\"0\">\n  <div class=\"title\" title=\"{{=type}}\">\n    {{=title}}\n    <button class=\"icon\" title=\"close\" data-msg=\"tiddler.close\" data-param=\"$currentTiddler\">{{$IconCancel}}</button>\n    {{!editDisabled}}\n    <button class=\"icon\" title=\"edit\" {{=editDisabled}} data-msg=\"tiddler.edit\" data-param=\"$currentTiddler\">{{$IconEdit}}</button>\n    <button class=\"icon\" title=\"delete\"{{=editDisabled}} data-msg=\"tiddler.delete\" data-param=\"$currentTiddler\">{{$IconDelete}}</button>\n    {{/!editDisabled}}\n    <<favorites.toggle>>\n    <!--<button class=\"icon\" title=\"favorite\" data-msg=\"favorites.toggle\" data-param=\"$currentTiddler\">{{$IconFavorite}}</button>-->\n  </div>\n  <div class=\"modified\">{{=modified}}</div>\n  <div class=\"text\">{{=fullText}}</div>\n  <div class=\"tags\">{{=tagLinks}}</div>\n  <div class=\"meta\">{{=metaInfo}}</div>\n</div>",
      "tags": [
        "$Template"
      ],
      "type": "html/template",
      "created": "2024-11-20T09:19:05.5696993Z",
      "updated": "2024-11-20T09:19:57.5619230Z"
    },
    {
      "title": "$TiddlerManagerPlugin",
      "text": "/**\n * ## Description\n * Provide <<favorites.toggle>> widget\n *   Toggles tag 'Favorite' on current tiddler\n *   for use on $TiddlerDisplay template\n */\n/**\n * ## Data\n * ```json\n * {\n *   \"version\": 1.1.0\n * }\n * ```\n */\n(function(){\n  let tiddlersToManage = [];\n  tw.tmp.manager = {\n    show(e, frm) {\n      e.preventDefault();\n      tiddlersToManage = tw.events.send('search.advanced', {\n        id: 'manager-search-list',\n        all: true,\n        title: frm.elements.title.value,\n        tag: frm.elements.tag.value,\n        pck: frm.elements.package.value,\n        type: frm.elements.type.value,\n      })[0];\n    },\n    delete(e, frm) {\n      e.preventDefault();\n      this.show(e, frm); // tiddlersToManage = tw.events.send('search.advanced', o)[0];\n      if (!tiddlersToManage.length) return alert('No tiddlers selected!');\n      setTimeout(() => {\n        if (!confirm(`Sure you want to delete these ${tiddlersToManage.length} tiddlers?`)) return;\n        tiddlersToManage.forEach(t => (tw.run.deleteTiddler(t.title, true)));\n      }, 300);\n    },\n  };\n  tw.macros.manager = {\n    form() {\n      const titles = tw.macros.core.allProperty('title');\n      const types = tw.macros.core.allProperty('type');\n      const tags = tw.macros.core.allTags();\n      const packages = tw.macros.core.allProperty('package');\n      return `<form>\n      <input name=title placeholder=title list=\"manager-all-titles\">\n        <datalist id=\"manager-all-titles\">${titles.map(t => `<option value=\"${t}\">${t}</option>`).join('\\n')}</datalist>\n      <input name=type placeholder=type list=\"manager-all-types\">\n        <datalist id=\"manager-all-types\">${types.map(t => `<option value=\"${t}\">${t}</option>`).join('\\n')}</datalist>\n      <input name=tag placeholder=tag list=\"manager-all-tags\">\n        <datalist id=\"manager-all-tags\">${tags.map(t => `<option value=\"${t}\">${t}</option>`).join('\\n')}</datalist>\n      <input name=package placeholder=package list=\"manager-all-packages\">\n        <datalist id=\"manager-all-packages\">${packages.map(t => `<option value=\"${t}\">${t}</option>`).join('\\n')}</datalist>\n      ${tw.ui.button('Show', null, null, 'btnmanagerShow', 'onclick=\"tw.tmp.manager.show(event, this.form)\"')}\n      ${tw.ui.button('Delete', null, null, 'btnmanagerDelete', 'onclick=\"tw.tmp.manager.delete(event, this.form)\"')}\n      </form><div id=\"manager-search-list\">No tiddlers to show</div>`;\n    },\n  };\n  tw.events.subscribe('tiddlers.delete.manager', managerDelete);\n  function managerDelete({title, tag, pck}) {\n    let list = tw.call('tiddlerSearch')({title, tag, pck})\n      .map(t => t.title);\n    if (!confirm(`Sure you want to delet these ${list.length} tiddlers?`)) return;\n    list.forEach(title => (tw.run.deleteTiddler(title, true)));\n  }\n})();\n",
      "tags": [],
      "type": "script/js",
      "created": "2024-11-08T10:20:43.4997526Z",
      "updated": "2024-11-27T21:13:22.1639598Z"
    },
    {
      "title": "MassDeleteDemo",
      "text": "<<manager.form>>",
      "tags": [
        "Demo"
      ],
      "type": "x-twikki",
      "created": "2024-11-20T22:31:05.2331695Z",
      "updated": "2024-11-21T08:07:21.7767736Z"
    }
  ]
}
